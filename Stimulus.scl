// 
// D:\Programming\Microchip\MicrophoneArray\microarrays\Stimulus.scl
// Generated by Stimulus MPLAB X
// Sat Jun 02 15:47:46 CDT 2018
// 


configuration for "dspic33ep256gp502" is
end configuration;

testbench for "dspic33ep256gp502" is
begin
 WAVEFORM: process is
     // read a raw data file of points, and continuously scans from the
     // start to end of the file.
     file data_file : text;
     variable status : file_open_status;
     variable data_line: line;
     variable data_point : integer;
     variable sample_time : time;
     variable filler : integer;
 begin
     sample_time := 10 us;	// default sample time
     wait until AD1CON1.DONE == '1';	// sync waveform to A2D start
     loop
         file_open(status, data_file, "D:\Programming\Microchip\MicrophoneArray\microarrays\datapoints.txt", read_mode);
         if status == open_ok then
             while endfile(data_file) == false loop
                 readline(data_file, data_line);
                 if match(data_line, "") == true then		// skip empty line
                 elsif match(data_line, "//") == true then	// skip comments
                 elsif match(data_line, "time") == true then	// process cmd "time"
                     read(data_line, filler);			// discard string "time"
                     read(data_line, sample_time);		// read sample time
                 elsif match(data_line, "hold") == true then	// cmd "hold"
                     wait for sample_time;			// hold line for 1 sample time
                 else
                     while match(data_line, "") == false loop
                         if match(data_line, "//") == true then	// skip end line comments
                             exit;				// skip to next line
                         else
                             wait for sample_time;		// sample time delay
                             read(data_line, data_point);	// get data point
                         end if;
                     end loop;
                 end if;
             end loop;
             file_close(data_file);			// end-of-file: close to reopen.
         end if;
     end loop;
     wait;
 end process;
 
 A2D_CONVERTER: process is
     variable    conv_time : time;
 begin
     // init the ADCONV operating constants
     conv_time := 12 us;		// set to conversion time (12Tad)
     ADC1BUF0  <= 0;			// value at power-on
     loop
         wait until AD1CON1.DONE == '1';
         if AD1CON1.ADON == '1' then		// simulate A2D only if AD is ON
             wait for conv_time;
             // if AD1CON1.FORM == 0 then	// process Unsigned
             //     ADC1BUF0 <= data_point;
             // elsif AD1CON1.FORM == 1 then	// process signed
             //     ADC1BUF0 <= data_point;
             // elsif AD1CON1.FORM == 2 then	// process Unsigned Q16
             //     ADC1BUF0 <= data_point;
             // else                           // process signed Q15
             //     ADC1BUF0 <= data_point;
             // end if;
             report "Set ADC value";
             ADC1BUF0 <= data_point;
             AD1CON1.DONE <= '0';
             IFS0.AD1IF <= '1';
         end if;
     end loop;
     wait;
 end process;
end testbench;
